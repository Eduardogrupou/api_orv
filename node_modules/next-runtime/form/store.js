"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFormStoreSubmit = exports.useFormStoreState = void 0;
const react_1 = require("react");
const zustand_1 = __importDefault(require("zustand"));
const fetch_error_1 = require("../lib/fetch-error");
const set_field_1 = require("../runtime/set-field");
const helpers_1 = require("./helpers");
const DEFAULT_STATE = { status: 'idle' };
const UNNAMED_FORM = Symbol('unnamed-form');
const useFormStore = (0, zustand_1.default)((set, get) => ({
    forms: {},
    setForm: (name, newState) => {
        set((state) => (Object.assign(Object.assign({}, state), { forms: Object.assign(Object.assign({}, state.forms), { [name]: newState }) })));
    },
    getForm: (name) => {
        var _a;
        return ((_a = get()) === null || _a === void 0 ? void 0 : _a.forms[name]) || DEFAULT_STATE;
    },
    submit: (options) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const name = (_a = options.name) !== null && _a !== void 0 ? _a : UNNAMED_FORM;
        const { setForm, getForm } = get();
        const { status, data } = getForm(name);
        const loading = status === 'submitting' || status === 'routing';
        if (loading)
            return;
        const values = {};
        for (const [name, value] of options.formData.entries()) {
            (0, set_field_1.setField)(values, name, value);
        }
        const baseState = {
            formData: options.formData,
            values,
        };
        try {
            setForm(name, Object.assign(Object.assign({}, baseState), { status: 'submitting', data }));
            const response = yield fetchData({
                data: options.formData,
                method: options.method,
                formAction: options.formAction,
            });
            if (response.redirected) {
                const data = yield response.json();
                setForm(name, Object.assign(Object.assign({}, baseState), { status: 'routing', data }));
                yield options.router.push(response.url, undefined, { scroll: true });
                const newState = Object.assign(Object.assign({}, baseState), { status: 'success', data });
                setForm(name, newState);
                options.onSuccess((0, helpers_1.formStateWithHelpers)(newState));
                return;
            }
            if (response.ok) {
                const newState = Object.assign(Object.assign({}, baseState), { status: 'success', data: yield response.json() });
                setForm(name, newState);
                options.onSuccess((0, helpers_1.formStateWithHelpers)(newState));
                return;
            }
            const newState = Object.assign(Object.assign({}, baseState), { status: 'error', data, error: yield fetch_error_1.FetchError.create(response) });
            setForm(name, newState);
            options.onError((0, helpers_1.formStateWithHelpers)(newState));
            return;
        }
        catch (error) {
            const newState = Object.assign(Object.assign({}, baseState), { status: 'error', error: error instanceof Error ? error : new Error(String(error)), data: getForm(name).data });
            setForm(name, newState);
            options.onError((0, helpers_1.formStateWithHelpers)(newState));
        }
    }),
}));
function useFormStoreState(name) {
    return useFormStore((0, react_1.useCallback)((state) => state.forms[name !== null && name !== void 0 ? name : UNNAMED_FORM] || DEFAULT_STATE, [name]));
}
exports.useFormStoreState = useFormStoreState;
const getFormStoreSubmit = (store) => store.submit;
function useFormStoreSubmit() {
    return useFormStore(getFormStoreSubmit);
}
exports.useFormStoreSubmit = useFormStoreSubmit;
function fetchData({ method: methodArg, formAction, data, }) {
    return __awaiter(this, void 0, void 0, function* () {
        // patch must be in all caps: https://github.com/github/fetch/issues/254
        const method = methodArg.toUpperCase();
        const url = new URL(formAction, window.location.href);
        if (method !== 'GET') {
            return fetch(url.toString(), {
                method,
                headers: { accept: 'application/json' },
                body: data,
            });
        }
        for (const [field, value] of data.entries()) {
            if (typeof value === 'string') {
                url.searchParams.set(field, value);
            }
            else {
                throw new Error('Cannot submit binary form data using GET');
            }
        }
        history.replaceState(null, '', url);
        return fetch(url.toString(), {
            method,
            headers: { accept: 'application/json' },
        });
    });
}
//# sourceMappingURL=store.js.map