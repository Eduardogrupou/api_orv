import { NextRouter } from 'next/router';
import { FetchError } from '../lib/fetch-error';
import { FormStateWithHelpers } from './helpers';
declare type FormName = string | symbol;
declare type FormSubmitOptions = {
    name?: string;
    router: NextRouter;
    method: string;
    formData: FormData;
    formAction: string;
    onSuccess: (state: FormStateWithHelpers<unknown>) => void;
    onError: (state: FormStateWithHelpers<unknown>) => void;
};
export declare type FormState<Data = Record<string, unknown>> = {
    status: 'idle';
    formData?: undefined;
    values?: undefined;
    data?: undefined;
    error?: undefined;
} | {
    status: 'submitting';
    formData: FormData;
    values: Record<string, unknown>;
    data?: Data;
    error?: undefined;
} | {
    status: 'routing';
    formData: FormData;
    values: Record<string, unknown>;
    data?: Data;
    error?: undefined;
} | {
    status: 'success';
    formData: FormData;
    values: Record<string, unknown>;
    data: Data;
    error?: undefined;
} | {
    status: 'error';
    formData: FormData;
    values: Record<string, unknown>;
    data?: Data;
    error: FetchError | Error;
};
export declare function useFormStoreState(name?: FormName): FormState;
export declare function useFormStoreSubmit(): (options: FormSubmitOptions) => Promise<void>;
export {};
