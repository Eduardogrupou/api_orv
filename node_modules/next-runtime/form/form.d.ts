import { FormEventHandler, FormHTMLAttributes } from 'react';
import { HttpMethod } from '../http-methods';
import { FormStateWithHelpers } from './helpers';
export declare type FormProps<Data> = {
    /**
     *  The method to use for form submissions. `get` appends the form-data to the
     *  URL in name/value pairs, while others send the form-data as an HTTP post
     *  transaction. Defaults to `post`.
     */
    method?: HttpMethod | Uppercase<HttpMethod>;
    /**
     * A callback that's invoked on form submission. Call `event.preventDefault()`
     * if you don't want Form to handle your submission. For example to abort in
     * case of validation errors.
     *
     * @param formData the data that was entered in the form
     */
    onSubmit?: FormEventHandler<HTMLFormElement>;
    /**
     * Called when the form is successfully submitted.
     * @param state The resulting form state
     */
    onSuccess?: (state: FormStateWithHelpers<Data>) => void;
    /**
     * Called if an error occured during form submission.
     * @param state The resulting form state
     */
    onError?: (state: FormStateWithHelpers<Data>) => void;
} & Omit<FormHTMLAttributes<HTMLFormElement>, 'onSubmit' | 'onError' | 'method'>;
/**
 * Replace your `form` with `Form` to submit it clientside using `fetch`, and get
 * access to the serialized form data in `usePendingSubmit()` to build a great
 * looking loading status.
 */
export declare const Form: <Data>(props: {
    /**
     *  The method to use for form submissions. `get` appends the form-data to the
     *  URL in name/value pairs, while others send the form-data as an HTTP post
     *  transaction. Defaults to `post`.
     */
    method?: "post" | "put" | "delete" | "patch" | "get" | "GET" | "POST" | "PUT" | "DELETE" | "PATCH" | undefined;
    /**
     * A callback that's invoked on form submission. Call `event.preventDefault()`
     * if you don't want Form to handle your submission. For example to abort in
     * case of validation errors.
     *
     * @param formData the data that was entered in the form
     */
    onSubmit?: FormEventHandler<HTMLFormElement> | undefined;
    /**
     * Called when the form is successfully submitted.
     * @param state The resulting form state
     */
    onSuccess?: ((state: FormStateWithHelpers<Data>) => void) | undefined;
    /**
     * Called if an error occured during form submission.
     * @param state The resulting form state
     */
    onError?: ((state: FormStateWithHelpers<Data>) => void) | undefined;
} & Omit<FormHTMLAttributes<HTMLFormElement>, "method" | "onSubmit" | "onError"> & {
    ref?: import("react").Ref<HTMLFormElement> | undefined;
}) => JSX.Element;
