/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
export declare type File = {
    name: string;
    size: number;
    type: string;
    path?: string;
} & Record<string, any>;
export declare type BodyParserOptions = {
    limits?: {
        /**
         * The maximum number of files a user can upload. Note that empty file
         * fields, still count against the file count limit.
         */
        fileCount?: number;
        /**
         * The maximum size per file in bytes.
         */
        fileSize?: number | string;
        /**
         * The maximum size of text fields.
         */
        fieldSize?: number | string;
        /**
         * The maximum size of json payloads.
         */
        jsonSize?: number | string;
        /**
         * A valid HTML accept string to restrict mime-types.
         * See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept
         */
        mimeType?: string;
    };
    /**
     * The directory where files will be stored. Defaults to the os.tmpdir
     */
    uploadDir?: string;
    /**
     * Handle the file streams, and pipe them to S3, file system, or whatever.
     * When using this, files will no longer be written to the file system.
     */
    onFile?: (params: {
        field: string;
        file: File;
        stream: NodeJS.ReadableStream;
    }) => void;
};
export declare function bodyparser<TData extends Record<string, unknown>>(req: IncomingMessage & {
    body: TData;
}, res: ServerResponse, options?: BodyParserOptions): Promise<TData | null>;
