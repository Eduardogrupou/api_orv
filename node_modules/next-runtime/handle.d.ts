import { HttpMethod } from './http-methods';
import { MiddlewareFn } from './lib/middleware';
import { TypedResponse } from './responses';
import { BodyParserOptions } from './runtime/body-parser';
import { CookieJar } from './runtime/cookies';
import { TypedHeaders } from './runtime/headers';
import { GetServerSideProps, GetServerSidePropsContext, GetServerSidePropsResult } from './types/next';
import { ParsedUrlQuery } from './types/querystring';
export declare type RuntimeContext<Q extends ParsedUrlQuery> = GetServerSidePropsContext<Q> & CookieJar & TypedHeaders & {
    req: {
        method: Uppercase<HttpMethod>;
    };
};
export declare type RuntimeResponse<P extends {
    [key: string]: any;
}> = MaybePromise<GetServerSidePropsResult<P> | TypedResponse<P>>;
export declare type RequestBody<F> = {
    req: {
        body: F;
    };
};
export declare type MaybePromise<T> = Promise<T> | T;
declare type Handlers<P extends {
    [key: string]: any;
}, Q extends ParsedUrlQuery = ParsedUrlQuery, F extends Record<string, unknown> = Record<string, unknown>> = {
    limits?: BodyParserOptions['limits'];
    uploadDir?: BodyParserOptions['uploadDir'];
    upload?: BodyParserOptions['onFile'];
    use?: MiddlewareFn<Q>[];
    get?: (context: RuntimeContext<Q>) => RuntimeResponse<P>;
    post?: (context: RuntimeContext<Q> & RequestBody<F>) => RuntimeResponse<P>;
    put?: (context: RuntimeContext<Q> & RequestBody<F>) => RuntimeResponse<P>;
    delete?: (context: RuntimeContext<Q> & RequestBody<F>) => RuntimeResponse<P>;
    patch?: (context: RuntimeContext<Q> & RequestBody<F>) => RuntimeResponse<P>;
};
export declare function handle<P extends {
    [key: string]: any;
}, Q extends ParsedUrlQuery = ParsedUrlQuery, F extends Record<string, unknown> = Record<string, unknown>>(handlers: Handlers<P, Q, F>): GetServerSideProps<P, Q>;
export {};
