"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTypedResponse = exports.getResponseType = exports.mergeHeaders = exports.mergeResponse = void 0;
function isPlainObject(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
}
function mergeResponse(left, right) {
    var _a, _b;
    const l = left;
    const r = right;
    // right over left
    return {
        status: (r === null || r === void 0 ? void 0 : r.status) || (l === null || l === void 0 ? void 0 : l.status),
        statusText: (r === null || r === void 0 ? void 0 : r.statusText) || (l === null || l === void 0 ? void 0 : l.statusText),
        headers: mergeHeaders(l === null || l === void 0 ? void 0 : l.headers, r === null || r === void 0 ? void 0 : r.headers),
        body: Object.assign(Object.assign(Object.assign({}, ((l === null || l === void 0 ? void 0 : l.body) || l)), ((r === null || r === void 0 ? void 0 : r.body) || r)), { props: Object.assign(Object.assign({}, (_a = ((l === null || l === void 0 ? void 0 : l.body) || l)) === null || _a === void 0 ? void 0 : _a.props), (_b = ((r === null || r === void 0 ? void 0 : r.body) || r)) === null || _b === void 0 ? void 0 : _b.props) }),
    };
}
exports.mergeResponse = mergeResponse;
function mergeHeaders(left, right) {
    const headers = {};
    for (const side of [left, right]) {
        if (typeof side === 'object') {
            for (const key of Object.keys(side)) {
                headers[key.toLowerCase()] = side[key];
            }
        }
    }
    return headers;
}
exports.mergeHeaders = mergeHeaders;
function getResponseType(response) {
    if (!isPlainObject(response)) {
        return 'unknown';
    }
    const root = 'body' in response ? response.body : response;
    if ('notFound' in root) {
        return 'not-found';
    }
    if ('redirect' in root) {
        return 'redirect';
    }
    if ('props' in root) {
        return 'json';
    }
    return 'unknown';
}
exports.getResponseType = getResponseType;
const propResultKeys = new Set(['props', 'notFound', 'redirect']);
function isTypedResponse(response) {
    if (!isPlainObject(response))
        return false;
    const keys = Object.keys(response);
    return keys.length !== 1 && !propResultKeys.has(keys[0]);
}
exports.isTypedResponse = isTypedResponse;
//# sourceMappingURL=response-utils.js.map