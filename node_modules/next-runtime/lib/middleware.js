"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyMiddlewares = void 0;
/* eslint-disable @typescript-eslint/ban-ts-comment */
const koa_compose_1 = __importDefault(require("koa-compose"));
const response_utils_1 = require("./response-utils");
function normalizeMiddleware(fn) {
    if (fn.length < 2) {
        // fn() => fn(context, next)
        // fn(context) => fn(context, next)
        return (ctx, next) => __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    resolve((0, response_utils_1.mergeResponse)(yield fn(ctx, next), yield next()));
                }
                catch (ex) {
                    if ((0, response_utils_1.getResponseType)(ex) !== 'unknown') {
                        resolve(ex);
                    }
                    else {
                        reject(ex);
                    }
                }
            }));
        });
    }
    if (fn.length === 2) {
        // fn(context, next) => fn(context, next)
        return (ctx, next) => __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    let nextResult;
                    const result = yield fn(ctx, () => (nextResult = next()));
                    resolve((0, response_utils_1.mergeResponse)(result, yield nextResult));
                }
                catch (ex) {
                    if ((0, response_utils_1.getResponseType)(ex) !== 'unknown') {
                        resolve(ex);
                    }
                    else {
                        reject(ex);
                    }
                }
            }));
        });
    }
    throw new Error('unsupported middleware function signature');
}
function applyMiddlewares(middlewares, handler) {
    if (!Array.isArray(middlewares) || typeof handler !== 'function') {
        return handler;
    }
    // @ts-ignore - this ignore should get fixed
    return (0, koa_compose_1.default)([...middlewares, handler].map(normalizeMiddleware));
}
exports.applyMiddlewares = applyMiddlewares;
//# sourceMappingURL=middleware.js.map